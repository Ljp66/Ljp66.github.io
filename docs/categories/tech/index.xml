<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>tech on LiJiapeng</title>
        <link>https://ljp66.github.io/categories/tech/</link>
        <description>Recent content in tech on LiJiapeng</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 30 Jan 2023 14:15:57 +0800</lastBuildDate><atom:link href="https://ljp66.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>golang介绍</title>
        <link>https://ljp66.github.io/post/introduce-golang/</link>
        <pubDate>Mon, 30 Jan 2023 14:15:57 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/introduce-golang/</guid>
        <description>&lt;h2 id=&#34;历史背景&#34;&gt;历史背景&lt;/h2&gt;
&lt;p&gt;随着软件规模的不断扩大，诸多的学者和谷歌的开发者们在公司内部的软件开发过程中开始经历大量的挫折，许多问题找不到令人满意的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。&lt;/li&gt;
&lt;li&gt;软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。&lt;/li&gt;
&lt;li&gt;现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好&lt;/li&gt;
&lt;li&gt;企业运行维护很多C/C++的项目，C/C++程序运行速度虽然很快，但是编译速度却很慢，同时还存在内存泄漏的一系列的困扰需要解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此学者们坐下来总结出了现在生产环境与软件开发之间的主要矛盾，并尝试设计一门全新的编程语言来解决这些问题。Go语言就在这样的环境下诞生了！&lt;/p&gt;
&lt;h2 id=&#34;语言特点&#34;&gt;语言特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go语言语法简洁高效，类似C语言。
&lt;ul&gt;
&lt;li&gt;Go语言语法在C语言的基础上进行优化，去掉了表达式和for循环中冗余的括号，强制统一了代码风格；从C语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。&lt;/li&gt;
&lt;li&gt;Go语言通过改善或去除在C、C++ 或Java中的一些所谓“开放”特性来让开发者们的工作更加便利。Go在语言设计上是相当克制，只有25个关键字，它没有隐式转换，没有构造函数和析构函数，没有运算符重载，没有默认参数，也没有继承，没有异常，没有宏，没有函数修饰。&lt;/li&gt;
&lt;li&gt;Go的数据类型丰富，除了支持表、字典等复杂的数据结构，还支持指针和接口类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速的编译时间，开发效率和运行效率高。
&lt;ul&gt;
&lt;li&gt;Go将静态语言的安全性和高效性与动态语言的易开发性进行有机结合，Go拥有接近C的运行效率和接近Python的开发效率；&lt;/li&gt;
&lt;li&gt;Go语言采用包模型进行依赖管理，这个模型通过严格的依赖关系检查机制来加快程序构建的速度，提供了非常好的可量测性。开发过程中相较于Java和C++呆滞的编译速度，Go可以快速编译；&lt;/li&gt;
&lt;li&gt;由于内存问题长期以来一直伴随着C++的开发者们，Go语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题。因此尽管Go语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原生支持并发。像 C、C++、Java、Python和JavaScript这些语言的并发控制复杂，而且容易出错，而Go解决这个问题非常地优雅和流畅。Go从语言层面支持并发，实现简单。Go的并发基于goroutine，一种轻量级线程，可实现大并发处理，高效利用多核。goroutine之间的通信可以使用sync包和channel机制来实现。&lt;/li&gt;
&lt;li&gt;稳定，向后兼容。Go拥有强大的编译检查、严格的编码规范和完整的软件生命周期工具，具有很强的稳定性。随着Go第一个版本发布的还有一份兼容性说明文档，该文档说明，Go的未来版本会确保向后兼容性，不会破坏现有程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go语言被设计成一门应用于搭载Web服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。对于高性能分布式系统领域而言，Go语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。&lt;/li&gt;
&lt;li&gt;但是Go语言同时也是一门可以用于实现一般目标的语言，例如对于文本的处理，前端展现，甚至像使用脚本一样使用它。使用Go开发命令行工具的最大好处是可以直接发布可执行的二进制文件，无需安装脚本语言本身的运行环境以及安装依赖包。&lt;/li&gt;
&lt;li&gt;因为垃圾回收和自动内存分配的原因，Go语言不适合用来开发对实时性要求很高的软件。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>hexo-usage</title>
        <link>https://ljp66.github.io/post/hexo-usage/</link>
        <pubDate>Mon, 23 Jan 2023 10:44:30 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/hexo-usage/</guid>
        <description>&lt;p&gt;Welcome to &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/troubleshooting.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a class=&#34;link&#34; href=&#34;https://github.com/hexojs/hexo/issues&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;Create a new post&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo new &lt;span class=&#34;s2&#34;&gt;&amp;#34;My New Post&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/writing.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;Run server&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/server.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;Generate static files&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo generate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/generating.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;Deploy to remote sites&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Deployment&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Epub vs Pdf</title>
        <link>https://ljp66.github.io/post/epub-vs-pdf/</link>
        <pubDate>Tue, 17 Jan 2023 15:41:57 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/epub-vs-pdf/</guid>
        <description>&lt;h2 id=&#34;一&#34;&gt;(一)&lt;/h2&gt;
&lt;p&gt;今天在手机上看到一篇关于 epub 文件格式的文章，底下评论区在比较 epub 与 pdf 这两种电子文件格式，这也引起了我的思考。&lt;/p&gt;
&lt;p&gt;平时我常用 pdf 格式存储文件，将不同类型的文件转化为 pdf 版本，因为 pdf 文件在不同设备间渲染结果一致，我的书与文件大都是关于计算机技术，内容中包含示例代码，需要一致的排版渲染。而且 pdf 文件对链接，图片，字体，代码块，数学公式等不同元素的支持稳定又全面，满足我的文件使用需求。&lt;/p&gt;
&lt;p&gt;为什么比较 epub 与 pdf 呢？文章主要讲述 epub 文件格式在电子书领域的优越性，少部分评论认为 pdf 文件格式更优秀，大部分人认为 epub 格式在电子书领域更优秀。&lt;/p&gt;
&lt;p&gt;大部分人使用手机看电子书，epub 格式的电子书会根据设备自动排版，段落自动换行，整个手机屏幕显示字数取决于设定的字体大小，这样你可以根据喜好调整排版。而 pdf 格式的电子书在不同设备间渲染结果一致，整页显示，用手机看字体显示偏小。虽然阅读器可以放大局部，但是读完显示的局部文字要滑移文件才能看其他部分，阅读不方便。&lt;/p&gt;
&lt;p&gt;我自然知道这个问题,因为我有时也需要在手机上查看文件，无奈计算机技术文档需要严格排版渲染。但是结合 epub 格式的特性，不难看出它在非计算机类书籍使用方面占有优势。我们日常工作学习中，大部分时间使用手机阅读，对电子书文件并没有十分严格的排版渲染要求，需要的是简单舒适的阅读体验，这时更适合使用 epub 格式。&lt;/p&gt;
&lt;h2 id=&#34;二&#34;&gt;(二)&lt;/h2&gt;
&lt;p&gt;上次我简单比较了 epub 与 pdf 两种文件格式，这次我再深入比较一番。&lt;/p&gt;
&lt;p&gt;我们使用文件，会制作、阅读、修改它。&lt;/p&gt;
&lt;p&gt;首先从制作讲起。制作 epub 文件的程序不多,很多读者可能不知道如何制作。我知道两个制作 epub 文件的程序，一个是专门制作 epub 文件的 sigil，另一个是电子书阅读器 calibre 附带的 epub 制作程序。epub 文件本质上是由 html 文本文件组成的 zip 压缩包，使用这两个工具制作 epub 需要具备一定的 html 知识。pdf格式被广泛支持，大部分文档制作程序都可以导出 pdf。我们日常使用 office 或者wps 制作文档，然后导出 pdf 格式。&lt;/p&gt;
&lt;p&gt;接着讲修改文件。我们经常写完一篇文章，几天之后再看，觉得哪里不好，想要修改。epub 文件像 office 文档，使用上述制作程序就可以修改。而 pdf 文件技术非常复杂，不易编辑，有许多商用专业 pdf 编辑软件，付费使用。一般来讲，我们会将 pdf 对应的源文件和 pdf 保存在一起，需要修改时修改源文件，然后再导出pdf。&lt;/p&gt;
&lt;p&gt;关于阅读，我在上一篇文章中已经讲了，这里不在赘述。&lt;/p&gt;
&lt;p&gt;总的来说，epub 文件制作有一点门槛，掌握基本 html 知识才容易制作与修改；pdf 文件容易制作，修改时一般修改源文件然后再导出 pdf，实现间接修改。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PDF补丁丁基本使用</title>
        <link>https://ljp66.github.io/post/pdfpatcher-usage/</link>
        <pubDate>Tue, 17 Jan 2023 15:18:50 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/pdfpatcher-usage/</guid>
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;日常办公中，我们经常使用pdf文件。pdf文件有许多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持富文本，例如图片，序列，表格，链接等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在阅读时做注释；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对数学公式支持良好；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在不同设备间无差别呈现等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们将文件转化为pdf格式发送给对方。&lt;/p&gt;
&lt;p&gt;pdf格式虽然具有种种优点，但是很难编辑、处理。我们很多时候需要将几张图片转化为pdf，将几个pdf合为一个，或者相反。市面上有许多针对pdf文件办公开发的软件，除了阅读及简单注释外，其余功能无一例外收费，且价格不菲。&lt;/p&gt;
&lt;p&gt;其实，我们日常办公中对pdf文件的操作需求很简单，但是很难找到合适的软件。我在网上寻找到一个小工具-pdf补丁丁，它安全免费，能满足我们日常使用。&lt;/p&gt;
&lt;h2 id=&#34;pdf补丁丁&#34;&gt;PDF补丁丁&lt;/h2&gt;
&lt;p&gt;pdf补丁丁的官网是&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/pdfpatcher/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/pdfpatcher&lt;/a&gt;，页面内有下载链接，软件说明书。下载得到一个压缩文件，解压，文件夹内包含程序的主体与依赖，这些文件不能删除或移动。程序无需安装，双击PDFPatcher.exe即可运行。主页如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/0x63eXvKwy.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;主页&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出PDF补丁丁有许多功能，我们主要使用下面几个。&lt;/p&gt;
&lt;h2 id=&#34;图片转pdf&#34;&gt;图片转PDF&lt;/h2&gt;
&lt;p&gt;在主页找到“合并文件”，点击，出现如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/PDFPatcher_a4vbnvIyiV.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;合并文件&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在界面左上角找到“添加文件”（上图画红框处），点击后出现文件管理器，选择需要转化的图片。多张图片可通过多次点击“添加文件”添加，图片排列顺序决定输出顺序。然后在界面底部“输出PDF文件”后点击“浏览”（注意：不要点击“PDF信息文件”后的“浏览”），出现文件管理器，对输出的PDF文件命名。最后点击“生成合并文件”，进度条走满后转化完成。&lt;/p&gt;
&lt;h2 id=&#34;合并pdf文件&#34;&gt;合并PDF文件&lt;/h2&gt;
&lt;p&gt;方法与图片转PDF类似，点击“添加文件”后选择PDF文件，然后设置输出PDF文件名，最后点击“生成合并文件”。&lt;/p&gt;
&lt;h2 id=&#34;提取pdf页面&#34;&gt;提取PDF页面&lt;/h2&gt;
&lt;p&gt;在主页点击“提取页面或拆分文档”，出现如下页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/KkDU528esB.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;提取页面&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在“原始PDF文件”后点击“浏览”，选择原PDF文件，然后在“输出PDF文件”后点击“浏览”，对输出文件进行命名。接着选择需要提取的PDF页码，在“页码范围”处填写页码。页码范围按照如下规则填写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;页码范围表示需处理的原始 PDF 文档页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不指定页码范围时，提取源文件所有页面的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如有多个页码，可用“,”或“ ”（空格）隔开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用“-”表示起止页码。例如：“1;4-15;2 56”，表示依次提取第1页、第4至15页、第2页和第56页的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如“-”之前的数字大于“-”之后的数字，表示逆序处理。例如：“300-1”表示提取第300、299、298……3、2、1页的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负数表示文档倒数页数，例如“-1”表示倒数第1页，“1&amp;ndash;2”表示从第1页到倒数第2页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分号“;”表示拆分成多个文件，例如“1-5;1,6-10”表示拆分成两个文件，其中第1至5页为一个文件，第1页和6到10页为第二个文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后点击“提取页面”，得到输出文件。&lt;/p&gt;
&lt;h2 id=&#34;pdf页面转图片&#34;&gt;PDF页面转图片&lt;/h2&gt;
&lt;p&gt;在主页点击“转换页面为图片”，出现如下页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/3FAS7ChT8F.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;页面转图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;PDF页面转图片大体操作与前面相同，选择“原始PDF文件”后软件会自动新建一个与原始PDF文件同名的文件夹存放图片。&lt;/p&gt;
&lt;p&gt;在设置“输出图片格式”时，可以选择常用的PNG（无损）或者JPEG（有损）；在输出图片尺寸下面可以设置分辨率，分辨率高图像存储空间大，清晰。&lt;/p&gt;
&lt;p&gt;最后点击“转换图片”得到多张图片。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本文介绍了如何使用PDF补丁丁简单处理PDF，可以满足日常办公。如果还想进一步了解，开发者提供的软件说明书中有进阶使用教程。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>hexo-markdown</title>
        <link>https://ljp66.github.io/post/hexo-markdown/</link>
        <pubDate>Sat, 14 Jan 2023 18:52:58 +0000</pubDate>
        
        <guid>https://ljp66.github.io/post/hexo-markdown/</guid>
        <description>&lt;h2 id=&#34;插入图片&#34;&gt;插入图片&lt;/h2&gt;
&lt;p&gt;在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。&lt;/p&gt;
&lt;h3 id=&#34;本地引用&#34;&gt;本地引用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;统一存放&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当Hexo项目中只用到少量图片时，可以将图片统一放在&lt;code&gt;source/images&lt;/code&gt;文件夹中，通过markdown语法访问它们。
图片既可以在首页内容中访问到，也可以在文章正文中访问到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![](/images/image.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;分散存放&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置&lt;code&gt;_config.yml&lt;/code&gt;来生成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;post_asset_folder: true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;将&lt;code&gt;_config.yml&lt;/code&gt;文件中的配置项&lt;code&gt;post_asset_folder&lt;/code&gt;设为true后，执行命令&lt;code&gt;hexo new post_name&lt;/code&gt;，在&lt;code&gt;source/_posts&lt;/code&gt;中会生成文章&lt;code&gt;post_name.md&lt;/code&gt;和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![](image.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;如果希望图片在文章和首页中同时显示，可以使用标签插件语法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{% asset_img image.jpg This is an image %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;cdn引用&#34;&gt;CDN引用&lt;/h3&gt;
&lt;p&gt;除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。&lt;/p&gt;
&lt;h2 id=&#34;数学公式&#34;&gt;数学公式&lt;/h2&gt;
&lt;p&gt;$$
c = \pm\sqrt{a^2 + b^2}
$$&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
