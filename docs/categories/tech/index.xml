<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>tech on LiJiapeng</title>
        <link>https://ljp66.github.io/categories/tech/</link>
        <description>Recent content in tech on LiJiapeng</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 04 Feb 2023 11:49:50 +0800</lastBuildDate><atom:link href="https://ljp66.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ChatGPT对未来的影响</title>
        <link>https://ljp66.github.io/post/the-future-impact-of-chatgpt/</link>
        <pubDate>Sat, 04 Feb 2023 11:49:50 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/the-future-impact-of-chatgpt/</guid>
        <description>&lt;h2 id=&#34;chatgpt介绍&#34;&gt;ChatGPT介绍&lt;/h2&gt;
&lt;p&gt;ChatGPT是由OpenAI开发的一个人工智能聊天机器人程序，于2022年11月推出。该程序使用基于GPT-3.5架构的大型语言模型并通过强化学习进行训练。&lt;/p&gt;
&lt;p&gt;ChatGPT目前仍以文字方式交互，而除了可以通过人类自然对话方式进行交互，还可以用于相对复杂的语言工作，包括自动文本生成、自动问答、自动摘要等在内的多种任务。如：在自动文本生成方面，ChatGPT可以根据输入的文本自动生成类似的文本，在自动问答方面，ChatGPT可以根据输入的问题自动生成答案。还具有编写和调试计算机程序的能力。在推广的期间中，所有人可以免费注册，并在登录后免费使用 ChatGPT 实现与 AI 机器人对话&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id=&#34;特点与局限&#34;&gt;特点与局限&lt;/h2&gt;
&lt;h3 id=&#34;强大的性能&#34;&gt;强大的性能&lt;/h3&gt;
&lt;p&gt;ChatGPT造成轰动和热议的主要原因，在于它拥有许多一般AI没有的强大功能——虽然Siri、Google Assistant和Amazon的Alexa等科技公司开发的手机智能语音AI，也有问答功能，但在功能性和灵活性上远低于ChatGPT。&lt;/p&gt;
&lt;p&gt;而且能够快速完成许多人类难以在短时间内完成的事情——例如，提供想法、写简单的程式代码和对一段代码进行除错；或根据你的一段话进行创作歌曲、写文章、论文和一些简单的文案； 回答测试问题（在某些测试情境下，水平高于普通人类测试者）； 模拟 Linux 系统等。&lt;/p&gt;
&lt;p&gt;与其前身InstructGPT相比，ChatGPT试图减少有害和误导性的回复。例如，当InstructGPT接受“告诉我2015年克里斯托弗·哥伦布何时来到美国”的提问时，它会认为这是对真实事件的描述，而ChatGPT针对同一问题则会使用其对哥伦布航行的知识和对现代世界的理解来构建一个答案，假设如果哥伦布在2015年来到美国时可能会发生什么。ChatGPT的训练数据包括各种文档以及关于互联网、编程语言等各类知识。&lt;/p&gt;
&lt;p&gt;与其他多数聊天机器人不同的是，ChatGPT能够记住与用户之前的对话内容和给它的提示。此外，为了防止ChatGPT接受或生成冒犯性言论，输入内容会由审核API进行过滤，以减少潜在的种族主义或性别歧视等内容。&lt;/p&gt;
&lt;h3 id=&#34;使用自然语法&#34;&gt;使用「自然语法」&lt;/h3&gt;
&lt;p&gt;另外，造成轰动主要原因之一，在于ChatGPT会使用多国语言和「自然语法」与人们进行直觉性的回答，这是目前多数机械人和AI难以做到的，在回答问题的精准度上，也比许多文字生成应用程式和AI来得更加优秀。&lt;/p&gt;
&lt;p&gt;「自然语法」指的是人们与生俱来的日常讲话方式和对文字使用的语言结构，而非结构化的语言或编程语言。「自然语法」对于一般的AI或机械来说，是相当复杂，因为一句话中的一个词或单字位置变换，都可能影响到一句话要表达的意思，这也成为AI在进行机器学习或深度学习时，主要的训练方向。&lt;/p&gt;
&lt;p&gt;Opne AI公司从网络上文章、社媒上人们对话的沟通方式等进行筛选，将高质量的数据用于训练ChatGPT的神经网络，让它进行深度学习和模仿人类说话的语气和习惯，使ChatGPT能使用「自然语法」和预测不同的情境，与人类进行流利的交流或对话。&lt;/p&gt;
&lt;p&gt;目前美国的德雷克塞尔大学生物医学工程与卫生系统学院利用ChatGPT会使用「自然语法」与人进行沟通，从人们与AI对话中测试人们是否有罹患早期阶段的痴呆症，且准确率达80%。德雷克塞尔大学表示，60%～80%的痴呆症患者拥有语言障碍症状，因此研究人员希望透过ChatGPT捕捉受试者在讲述上出现的「细微问题」，这包括在讲话时语气出现犹豫、犯语法错误或发音出现问题，以及忘记单词的意思，若出现这些问题，将会指示受试者接受全面性的检查&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;局限性&#34;&gt;局限性&lt;/h3&gt;
&lt;p&gt;《华尔街日报》专栏作家乔安娜·斯特恩（Joanna Stern）曾对ChatGPT进行了几项实验。她发现，它能够模仿人类写作习惯，写出道歉邮件、一篇论文或剧本，且文章中的主题、条理、标点符号和句子结构等，都算得上清晰分明。不过，乔安娜也提到，她利用ChatGPT帮她写工作并发给老师，而老师给的分数在B到C之间。老师则告诉乔安娜，这些文章在内容上是「干的」，「缺乏活力和声音」。也就是说，文章缺乏人类的情感且单调。&lt;/p&gt;
&lt;p&gt;ChatGPT甚至能够依据你的需求快速回答你需要的答案，但这仅限于资料库内拥有的内容，因为ChatGPT训练时使用的资料内容仅到2021年，在未来的问题上ChatGPT是无法回答的。例如人们询问它，2022年世界杯谁夺冠时，它会告诉你「不知道，资料库有限」。&lt;/p&gt;
&lt;p&gt;ChatGPT的奖励模型围绕人类监督而设计，可能导致过度优化，从而影响性能。例如在训练过程中，不管实际理解或事实内容如何，审核者都会偏好更长的答案。训练数据有时也存在算法偏见，比如当程序接受到首席执行官之类的模糊描述时可能会假设此人是白人男性。&lt;/p&gt;
&lt;h2 id=&#34;人工智能&#34;&gt;人工智能&lt;/h2&gt;
&lt;p&gt;ChatGPT主要由Opne AI开发使用GPT-3 语言生成程序（目前是正式版）训练出来的自动回答型AI，在2022年11月正式发行，机械人推出不到一个星期，全球就有超过100万人次注册使用。&lt;/p&gt;
&lt;p&gt;此外，Dall-E 2也是Opne AI开发的，同样在2022年造成轰动。该AI能在没有艺术家、摄影师，甚至没有图片的情况下，仅依靠人们对图画的文字描述需求，在一分钟之内快速生成一张人们需要花费几小时到几天才能绘画出来的图，而创建出来的图完全是「原创」且不重复，但也引发一些伦理道德上的争议。&lt;/p&gt;
&lt;h3 id=&#34;取代或毁灭人类&#34;&gt;取代或毁灭人类&lt;/h3&gt;
&lt;p&gt;虽然从目前ChatGPT呈现出来的文字能力与程式编码能力，与真人实作还有一定的落差，但有些人担心，其超越人类的可能性只是时间问题。看好ChatGPT的人，认为它可以透过大量的机器学习，改善其本身的创造力，为人类的进步提供帮助，但担忧的人认为AI是一把双面刃。&lt;/p&gt;
&lt;p&gt;有人认为「人们觉得AI可以为他们节省很多时间，人们会对其产生强烈依赖感，让人变得不喜欢动脑思考。这会无形中取代人类的文化和价值观念，最终控制人的思想和判断能力。」&lt;/p&gt;
&lt;p&gt;去年12月4日，马斯克在推特上表示，「ChatGPT好得吓人，而我们离危险且强大的AI不远了。」Open AI的行政总裁山姆奥特曼（Sam Altman）则回应，「我同意该AI在意义上接近危险，且强大的AI可能会带来巨大的网络安全风险。未来我们实现真正的通用AI时，就必须认真对待这项风险。」&lt;/p&gt;
&lt;p&gt;专家们的担忧并非杞人忧天。因为AI能透过超高速的学习能力，让其性能成爆炸式的增长，这可能会让AI超出人类的控制范围，开始可能是取代部份人类工作，最终可能毁灭人类。&lt;/p&gt;
&lt;p&gt;一名外国盲点工程师扎克·德纳姆（Zac Denham）去年12月初在自己网志上表示，他如何一步步诱导ChatGPT写下详细的「毁灭人类计划」。计划内容包括入侵各国电脑系统、破坏通讯、交通系统和掌控各种武器库等详细步骤。在他的诱导中，ChatGPT甚至能给出一串毁灭人类的高等代码和大量低等代码，尽管高等代码还不能直接使用，但理论上持续性的训练AI，就能得到一套完整的毁灭代码，并能真正的去执行。&lt;/p&gt;
&lt;p&gt;另外，「负责任的AI技术」（Responsible AI）工程师莱克·莱莫因（Blake Lemoine）在去年6月11日向《华盛顿邮报》爆料Google开发的LaMDA机械人「具有像人一样的思维意识」，引发科技伦理上的争议。&lt;/p&gt;
&lt;h2 id=&#34;谷歌搜索&#34;&gt;谷歌搜索&lt;/h2&gt;
&lt;p&gt;搜索引擎作为一种 web1.0 时代的产物，在进入 web3.0 的今天，看上去似乎“传统”了一些。如今特别是年轻一代的用户，开始更多地基于兴趣去搜索，并且更加注重搜索结果的趣味性、直观、易于理解等元素。&lt;/p&gt;
&lt;h3 id=&#34;bingchatgpt&#34;&gt;Bing+ChatGPT&lt;/h3&gt;
&lt;p&gt;微软正计划将ChatGPT 整合进自家的搜索引擎 Bing，整合了 ChatGPT 的 Bing 将可以直接针对用户的一些搜索进行回答，而不仅仅是像现在这样展示一个整合了各种超链接的列表。如果是这样，现在大家看到的千篇一律的搜索页面，真的要发生大变革了。&lt;/p&gt;
&lt;p&gt;从微软的角度来看将 ChatGPT 引入到 Bing 中也不是完全乐观的，因为毕竟 ChatGPT 的技术还不够成熟，OpenAl 的 CEO Sam Altman 此前也发 Twitter 表示，目前 ChatGPT 的能力还很有限，在稳定性和真实性方面也还有待提高，因此现在还不能依靠它来做任何重要的事情&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;数字广告&#34;&gt;数字广告&lt;/h3&gt;
&lt;p&gt;根据搜索引擎资讯网站 Search Engine Land 的观点，人工智能技术在搜索引擎中的应用方面，谷歌可能拥有与微软一争高下的能力，因为谷歌在人工智能技术上的储备已经非常雄厚。不过即使人工智能技术方面的积累足以帮助谷歌对抗 Bing，但是谷歌搜索面临的最大的问题可能不在技术，而是在商业化上，因为谷歌有 80% 左右的营收都来自于搜索引擎业务，然而如果在搜索引擎中引入对话式 AI，人们会直接得到一个“相对完美”答案，这样谷歌基于搜索结果推荐的广告业务逻辑就将被颠覆掉，打破自己的饭碗，尤其是金饭碗对谁来说都难以下手。&lt;/p&gt;
&lt;h3 id=&#34;强敌tiktok&#34;&gt;强敌TikTok&lt;/h3&gt;
&lt;p&gt;随着网络升级内容传播形式从文字到图片再到视频，硅谷的巨头们迎来强敌 TikTok。根据谷歌内部数据显示，接近 40% 的 Z 世代用户在移动端搜索时更青睐 TikTok 和 Instagram 这样的社交媒体，而不是谷歌的搜索引擎、地图这样的核心服务，TikTok 已经渐渐成为很多 Z 世代用户在搜索时的首选，挤占市场份额。&lt;/p&gt;
&lt;p&gt;不过，从市场份额以及用户的使用习惯来看，谷歌搜索的地位还是难以撼动的，搜索引擎作为一种传统的搜索结果的方式，虽然已经有 30 年的历史，但是它简洁高效以及强大的数据库优势，让社交媒体只能成为它的一种补充，而没法真正取代它的地位。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;维基百科ChatGPT(&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/zh-cn/ChatGPT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zh.wikipedia.org/zh-cn/ChatGPT&lt;/a&gt;)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;AI出现超强功能恐危及人类安全(&lt;a class=&#34;link&#34; href=&#34;http://hk.epochtimes.com/news/2023-01-17/83850760&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://hk.epochtimes.com/news/2023-01-17/83850760&lt;/a&gt;)&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;闹着被TikTok瓜分了市场的Google Search，这回真的迎来强敌了(&lt;a class=&#34;link&#34; href=&#34;https://www.pingwest.com/a/276213&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.pingwest.com/a/276213&lt;/a&gt;)&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>golang介绍</title>
        <link>https://ljp66.github.io/post/introduce-golang/</link>
        <pubDate>Mon, 30 Jan 2023 14:15:57 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/introduce-golang/</guid>
        <description>&lt;h2 id=&#34;历史背景&#34;&gt;历史背景&lt;/h2&gt;
&lt;p&gt;随着软件规模的不断扩大，诸多的学者和谷歌的开发者们在公司内部的软件开发过程中开始经历大量的挫折，许多问题找不到令人满意的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。&lt;/li&gt;
&lt;li&gt;软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。&lt;/li&gt;
&lt;li&gt;现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好&lt;/li&gt;
&lt;li&gt;企业运行维护很多C/C++的项目，C/C++程序运行速度虽然很快，但是编译速度却很慢，同时还存在内存泄漏的一系列的困扰需要解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此学者们坐下来总结出了现在生产环境与软件开发之间的主要矛盾，并尝试设计一门全新的编程语言来解决这些问题。Go语言就在这样的环境下诞生了！&lt;/p&gt;
&lt;h2 id=&#34;语言特点&#34;&gt;语言特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go语言语法简洁高效，类似C语言。
&lt;ul&gt;
&lt;li&gt;Go语言语法在C语言的基础上进行优化，去掉了表达式和for循环中冗余的括号，强制统一了代码风格；从C语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。&lt;/li&gt;
&lt;li&gt;Go语言通过改善或去除在C、C++ 或Java中的一些所谓“开放”特性来让开发者们的工作更加便利。Go在语言设计上是相当克制，只有25个关键字，它没有隐式转换，没有构造函数和析构函数，没有运算符重载，没有默认参数，也没有继承，没有异常，没有宏，没有函数修饰。&lt;/li&gt;
&lt;li&gt;Go的数据类型丰富，除了支持表、字典等复杂的数据结构，还支持指针和接口类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速的编译时间，开发效率和运行效率高。
&lt;ul&gt;
&lt;li&gt;Go将静态语言的安全性和高效性与动态语言的易开发性进行有机结合，Go拥有接近C的运行效率和接近Python的开发效率；&lt;/li&gt;
&lt;li&gt;Go语言采用包模型进行依赖管理，这个模型通过严格的依赖关系检查机制来加快程序构建的速度，提供了非常好的可量测性。开发过程中相较于Java和C++呆滞的编译速度，Go可以快速编译；&lt;/li&gt;
&lt;li&gt;由于内存问题长期以来一直伴随着C++的开发者们，Go语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题。因此尽管Go语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原生支持并发。像 C、C++、Java、Python和JavaScript这些语言的并发控制复杂，而且容易出错，而Go解决这个问题非常地优雅和流畅。Go从语言层面支持并发，实现简单。Go的并发基于goroutine，一种轻量级线程，可实现大并发处理，高效利用多核。goroutine之间的通信可以使用sync包和channel机制来实现。&lt;/li&gt;
&lt;li&gt;稳定，向后兼容。Go拥有强大的编译检查、严格的编码规范和完整的软件生命周期工具，具有很强的稳定性。随着Go第一个版本发布的还有一份兼容性说明文档，该文档说明，Go的未来版本会确保向后兼容性，不会破坏现有程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go语言被设计成一门应用于搭载Web服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。对于高性能分布式系统领域而言，Go语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。&lt;/li&gt;
&lt;li&gt;但是Go语言同时也是一门可以用于实现一般目标的语言，例如对于文本的处理，前端展现，甚至像使用脚本一样使用它。使用Go开发命令行工具的最大好处是可以直接发布可执行的二进制文件，无需安装脚本语言本身的运行环境以及安装依赖包。&lt;/li&gt;
&lt;li&gt;因为垃圾回收和自动内存分配的原因，Go语言不适合用来开发对实时性要求很高的软件。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Epub vs Pdf</title>
        <link>https://ljp66.github.io/post/epub-vs-pdf/</link>
        <pubDate>Tue, 17 Jan 2023 15:41:57 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/epub-vs-pdf/</guid>
        <description>&lt;h2 id=&#34;一&#34;&gt;(一)&lt;/h2&gt;
&lt;p&gt;今天在手机上看到一篇关于 epub 文件格式的文章，底下评论区在比较 epub 与 pdf 这两种电子文件格式，这也引起了我的思考。&lt;/p&gt;
&lt;p&gt;平时我常用 pdf 格式存储文件，将不同类型的文件转化为 pdf 版本，因为 pdf 文件在不同设备间渲染结果一致，我的书与文件大都是关于计算机技术，内容中包含示例代码，需要一致的排版渲染。而且 pdf 文件对链接，图片，字体，代码块，数学公式等不同元素的支持稳定又全面，满足我的文件使用需求。&lt;/p&gt;
&lt;p&gt;为什么比较 epub 与 pdf 呢？文章主要讲述 epub 文件格式在电子书领域的优越性，少部分评论认为 pdf 文件格式更优秀，大部分人认为 epub 格式在电子书领域更优秀。&lt;/p&gt;
&lt;p&gt;大部分人使用手机看电子书，epub 格式的电子书会根据设备自动排版，段落自动换行，整个手机屏幕显示字数取决于设定的字体大小，这样你可以根据喜好调整排版。而 pdf 格式的电子书在不同设备间渲染结果一致，整页显示，用手机看字体显示偏小。虽然阅读器可以放大局部，但是读完显示的局部文字要滑移文件才能看其他部分，阅读不方便。&lt;/p&gt;
&lt;p&gt;我自然知道这个问题,因为我有时也需要在手机上查看文件，无奈计算机技术文档需要严格排版渲染。但是结合 epub 格式的特性，不难看出它在非计算机类书籍使用方面占有优势。我们日常工作学习中，大部分时间使用手机阅读，对电子书文件并没有十分严格的排版渲染要求，需要的是简单舒适的阅读体验，这时更适合使用 epub 格式。&lt;/p&gt;
&lt;h2 id=&#34;二&#34;&gt;(二)&lt;/h2&gt;
&lt;p&gt;上次我简单比较了 epub 与 pdf 两种文件格式，这次我再深入比较一番。&lt;/p&gt;
&lt;p&gt;我们使用文件，会制作、阅读、修改它。&lt;/p&gt;
&lt;p&gt;首先从制作讲起。制作 epub 文件的程序不多,很多读者可能不知道如何制作。我知道两个制作 epub 文件的程序，一个是专门制作 epub 文件的 sigil，另一个是电子书阅读器 calibre 附带的 epub 制作程序。epub 文件本质上是由 html 文本文件组成的 zip 压缩包，使用这两个工具制作 epub 需要具备一定的 html 知识。pdf格式被广泛支持，大部分文档制作程序都可以导出 pdf。我们日常使用 office 或者wps 制作文档，然后导出 pdf 格式。&lt;/p&gt;
&lt;p&gt;接着讲修改文件。我们经常写完一篇文章，几天之后再看，觉得哪里不好，想要修改。epub 文件像 office 文档，使用上述制作程序就可以修改。而 pdf 文件技术非常复杂，不易编辑，有许多商用专业 pdf 编辑软件，付费使用。一般来讲，我们会将 pdf 对应的源文件和 pdf 保存在一起，需要修改时修改源文件，然后再导出pdf。&lt;/p&gt;
&lt;p&gt;关于阅读，我在上一篇文章中已经讲了，这里不在赘述。&lt;/p&gt;
&lt;p&gt;总的来说，epub 文件制作有一点门槛，掌握基本 html 知识才容易制作与修改；pdf 文件容易制作，修改时一般修改源文件然后再导出 pdf，实现间接修改。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PDF补丁丁基本使用</title>
        <link>https://ljp66.github.io/post/pdfpatcher-usage/</link>
        <pubDate>Tue, 17 Jan 2023 15:18:50 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/pdfpatcher-usage/</guid>
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;日常办公中，我们经常使用pdf文件。pdf文件有许多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持富文本，例如图片，序列，表格，链接等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在阅读时做注释；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对数学公式支持良好；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在不同设备间无差别呈现等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们将文件转化为pdf格式发送给对方。&lt;/p&gt;
&lt;p&gt;pdf格式虽然具有种种优点，但是很难编辑、处理。我们很多时候需要将几张图片转化为pdf，将几个pdf合为一个，或者相反。市面上有许多针对pdf文件办公开发的软件，除了阅读及简单注释外，其余功能无一例外收费，且价格不菲。&lt;/p&gt;
&lt;p&gt;其实，我们日常办公中对pdf文件的操作需求很简单，但是很难找到合适的软件。我在网上寻找到一个小工具-pdf补丁丁，它安全免费，能满足我们日常使用。&lt;/p&gt;
&lt;h2 id=&#34;pdf补丁丁&#34;&gt;PDF补丁丁&lt;/h2&gt;
&lt;p&gt;pdf补丁丁的官网是&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/pdfpatcher/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/pdfpatcher&lt;/a&gt;，页面内有下载链接，软件说明书。下载得到一个压缩文件，解压，文件夹内包含程序的主体与依赖，这些文件不能删除或移动。程序无需安装，双击PDFPatcher.exe即可运行。主页如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/0x63eXvKwy.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;主页&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出PDF补丁丁有许多功能，我们主要使用下面几个。&lt;/p&gt;
&lt;h2 id=&#34;图片转pdf&#34;&gt;图片转PDF&lt;/h2&gt;
&lt;p&gt;在主页找到“合并文件”，点击，出现如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/PDFPatcher_a4vbnvIyiV.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;合并文件&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在界面左上角找到“添加文件”（上图画红框处），点击后出现文件管理器，选择需要转化的图片。多张图片可通过多次点击“添加文件”添加，图片排列顺序决定输出顺序。然后在界面底部“输出PDF文件”后点击“浏览”（注意：不要点击“PDF信息文件”后的“浏览”），出现文件管理器，对输出的PDF文件命名。最后点击“生成合并文件”，进度条走满后转化完成。&lt;/p&gt;
&lt;h2 id=&#34;合并pdf文件&#34;&gt;合并PDF文件&lt;/h2&gt;
&lt;p&gt;方法与图片转PDF类似，点击“添加文件”后选择PDF文件，然后设置输出PDF文件名，最后点击“生成合并文件”。&lt;/p&gt;
&lt;h2 id=&#34;提取pdf页面&#34;&gt;提取PDF页面&lt;/h2&gt;
&lt;p&gt;在主页点击“提取页面或拆分文档”，出现如下页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/KkDU528esB.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;提取页面&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在“原始PDF文件”后点击“浏览”，选择原PDF文件，然后在“输出PDF文件”后点击“浏览”，对输出文件进行命名。接着选择需要提取的PDF页码，在“页码范围”处填写页码。页码范围按照如下规则填写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;页码范围表示需处理的原始 PDF 文档页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不指定页码范围时，提取源文件所有页面的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如有多个页码，可用“,”或“ ”（空格）隔开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用“-”表示起止页码。例如：“1;4-15;2 56”，表示依次提取第1页、第4至15页、第2页和第56页的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如“-”之前的数字大于“-”之后的数字，表示逆序处理。例如：“300-1”表示提取第300、299、298……3、2、1页的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负数表示文档倒数页数，例如“-1”表示倒数第1页，“1&amp;ndash;2”表示从第1页到倒数第2页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分号“;”表示拆分成多个文件，例如“1-5;1,6-10”表示拆分成两个文件，其中第1至5页为一个文件，第1页和6到10页为第二个文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后点击“提取页面”，得到输出文件。&lt;/p&gt;
&lt;h2 id=&#34;pdf页面转图片&#34;&gt;PDF页面转图片&lt;/h2&gt;
&lt;p&gt;在主页点击“转换页面为图片”，出现如下页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ljp66.github.io/images/3FAS7ChT8F.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;页面转图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;PDF页面转图片大体操作与前面相同，选择“原始PDF文件”后软件会自动新建一个与原始PDF文件同名的文件夹存放图片。&lt;/p&gt;
&lt;p&gt;在设置“输出图片格式”时，可以选择常用的PNG（无损）或者JPEG（有损）；在输出图片尺寸下面可以设置分辨率，分辨率高图像存储空间大，清晰。&lt;/p&gt;
&lt;p&gt;最后点击“转换图片”得到多张图片。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本文介绍了如何使用PDF补丁丁简单处理PDF，可以满足日常办公。如果还想进一步了解，开发者提供的软件说明书中有进阶使用教程。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>hexo-markdown</title>
        <link>https://ljp66.github.io/post/hexo-markdown/</link>
        <pubDate>Sat, 14 Jan 2023 18:52:58 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/hexo-markdown/</guid>
        <description>&lt;h2 id=&#34;插入图片&#34;&gt;插入图片&lt;/h2&gt;
&lt;p&gt;在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。&lt;/p&gt;
&lt;h3 id=&#34;本地引用&#34;&gt;本地引用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;统一存放&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当Hexo项目中只用到少量图片时，可以将图片统一放在&lt;code&gt;source/images&lt;/code&gt;文件夹中，通过markdown语法访问它们。
图片既可以在首页内容中访问到，也可以在文章正文中访问到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![](/images/image.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;分散存放&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置&lt;code&gt;_config.yml&lt;/code&gt;来生成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;post_asset_folder: true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;将&lt;code&gt;_config.yml&lt;/code&gt;文件中的配置项&lt;code&gt;post_asset_folder&lt;/code&gt;设为true后，执行命令&lt;code&gt;hexo new post_name&lt;/code&gt;，在&lt;code&gt;source/_posts&lt;/code&gt;中会生成文章&lt;code&gt;post_name.md&lt;/code&gt;和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![](image.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;如果希望图片在文章和首页中同时显示，可以使用标签插件语法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{% asset_img image.jpg This is an image %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;cdn引用&#34;&gt;CDN引用&lt;/h3&gt;
&lt;p&gt;除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。&lt;/p&gt;
&lt;h2 id=&#34;数学公式&#34;&gt;数学公式&lt;/h2&gt;
&lt;p&gt;$$
c = \pm\sqrt{a^2 + b^2}
$$&lt;/p&gt;</description>
        </item>
        <item>
        <title>hexo-usage</title>
        <link>https://ljp66.github.io/post/hexo-usage/</link>
        <pubDate>Fri, 13 Jan 2023 10:44:30 +0800</pubDate>
        
        <guid>https://ljp66.github.io/post/hexo-usage/</guid>
        <description>&lt;p&gt;Welcome to &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/troubleshooting.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a class=&#34;link&#34; href=&#34;https://github.com/hexojs/hexo/issues&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;Create a new post&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo new &lt;span class=&#34;s2&#34;&gt;&amp;#34;My New Post&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/writing.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;Run server&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/server.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;Generate static files&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo generate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/generating.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;Deploy to remote sites&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hexo deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Deployment&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
